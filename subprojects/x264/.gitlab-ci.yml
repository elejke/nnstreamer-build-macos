stages:
    - build
    - test
    - release

.variables-debian-amd64: &variables-debian-amd64
    _TRIPLET: ""
    _PLATFORMSUFFIX: ""
    _PATH: "debian-x86_64"
    _WRAPPER: ""

.variables-debian-aarch64: &variables-debian-aarch64
    _TRIPLET: ""
    _PLATFORMSUFFIX: ""
    _PATH: "debian-aarch64"
    _WRAPPER: ""

.variables-win32: &variables-win32
    _TRIPLET: "i686-w64-mingw32"
    _PLATFORMSUFFIX: ".exe"
    _PATH: "win32"
    _WRAPPER: "wine"

.variables-win64: &variables-win64
    _TRIPLET: "x86_64-w64-mingw32"
    _PLATFORMSUFFIX: ".exe"
    _PATH: "win64"
    _WRAPPER: "wine64"

.variables-macos: &variables-macos
    _TRIPLET: "x86_64-apple-darwin18"
    _PLATFORMSUFFIX: ""
    _PATH: "macos-x86_64"
    _WRAPPER: ""

.build:
    stage: build
    when: manual
    script: |
        set -x
        LOCAL_INSTALL_DIR=`pwd`/local_install
        export PKG_CONFIG_LIBDIR=${LOCAL_INSTALL_DIR}/lib/pkgconfig
        git clone --depth 1 --branch master https://git.ffmpeg.org/ffmpeg.git ffmpeg
        cd ffmpeg
        ./configure --prefix="${LOCAL_INSTALL_DIR}" --enable-pic --disable-debug --extra-ldflags="-static" --disable-programs --disable-doc --disable-avdevice --disable-postproc --disable-avfilter --disable-network --disable-encoders --disable-muxers
        make -j$(getconf _NPROCESSORS_ONLN)
        make -j$(getconf _NPROCESSORS_ONLN) install
        cd ..
        git clone --depth 1 --branch master https://github.com/l-smash/l-smash.git lsmash
        cd lsmash
        ./configure --prefix="${LOCAL_INSTALL_DIR}" --extra-ldflags="-static"
        make -j$(getconf _NPROCESSORS_ONLN)
        make -j$(getconf _NPROCESSORS_ONLN) install
        cd ..
        ./configure --enable-pic --enable-strip --extra-ldflags="-static"
        make -j$(getconf _NPROCESSORS_ONLN) x264 checkasm
    artifacts:
        name: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
        paths:
            - x264${_PLATFORMSUFFIX}
            - checkasm8${_PLATFORMSUFFIX}
            - checkasm10${_PLATFORMSUFFIX}
        expire_in: 1 week

build-debian-amd64:
    extends: .build
    image: registry.videolan.org/x264-debian-unstable:20190404162201
    tags:
        - docker
        - amd64
    variables: *variables-debian-amd64

build-debian-aarch64:
    extends: .build
    image: registry.videolan.org/x264-debian-unstable-aarch64:20190716192245
    tags:
        - docker
        - aarch64
    variables: *variables-debian-aarch64

.build-win:
    extends: build-debian-amd64
    script: |
        set -x
        LOCAL_INSTALL_DIR=`pwd`/${_TRIPLET}
        export PKG_CONFIG_LIBDIR=${LOCAL_INSTALL_DIR}/lib/pkgconfig
        curl -f -o vlc-contrib-${_TRIPLET}-latest.tar.bz2 https://nightlies.videolan.org/build/contribs/vlc-contrib-${_TRIPLET}-latest.tar.bz2
        bunzip2 vlc-contrib-${_TRIPLET}-latest.tar.bz2
        tar xvf vlc-contrib-${_TRIPLET}-latest.tar
        sed -i "s#@@CONTRIB_PREFIX@@#${LOCAL_INSTALL_DIR}#g" ${PKG_CONFIG_LIBDIR}/*.pc
        git clone --depth 1 --branch master https://github.com/l-smash/l-smash.git lsmash
        cd lsmash
        ./configure --prefix="${LOCAL_INSTALL_DIR}" --target-os="${_TRIPLET}" --cross-prefix="${_TRIPLET}-"
        make -j$(getconf _NPROCESSORS_ONLN)
        make -j$(getconf _NPROCESSORS_ONLN) install
        cd ..
        ./configure --host="${_TRIPLET}" --cross-prefix="${_TRIPLET}-" --enable-pic --enable-strip
        make -j$(getconf _NPROCESSORS_ONLN) x264 checkasm

build-win32:
    extends: .build-win
    variables: *variables-win32

build-win64:
    extends: .build-win
    variables: *variables-win64

build-macos:
    extends: .build
    tags:
        - macos
    script: |
        set -x
        LOCAL_INSTALL_DIR=`pwd`/${_TRIPLET}
        export PKG_CONFIG_LIBDIR=${LOCAL_INSTALL_DIR}/lib/pkgconfig
        curl -f -o vlc-contrib-${_TRIPLET}-latest.tar.bz2 https://nightlies.videolan.org/build/contribs/vlc-contrib-${_TRIPLET}-latest.tar.bz2
        bunzip2 vlc-contrib-${_TRIPLET}-latest.tar.bz2
        tar xvf vlc-contrib-${_TRIPLET}-latest.tar
        sed -i.bak "s#@@CONTRIB_PREFIX@@#${LOCAL_INSTALL_DIR}#g" ${PKG_CONFIG_LIBDIR}/*.pc
        git clone --depth 1 --branch master https://github.com/l-smash/l-smash.git lsmash
        cd lsmash
        ./configure --prefix="${LOCAL_INSTALL_DIR}"
        make -j$(getconf _NPROCESSORS_ONLN)
        make -j$(getconf _NPROCESSORS_ONLN) install
        cd ..
        ./configure --enable-pic --enable-strip
        make -j$(getconf _NPROCESSORS_ONLN) x264 checkasm
    variables: *variables-macos

.test: &test
    stage: test
    when: manual
    script: |
        set -x
        ${_WRAPPER} ./checkasm8${_PLATFORMSUFFIX}
        ${_WRAPPER} ./checkasm10${_PLATFORMSUFFIX}
    artifacts:
        expire_in: 10 minutes

test-debian-amd64:
    <<: *test
    extends: build-debian-amd64
    dependencies:
        - build-debian-amd64
    variables: *variables-debian-amd64

test-debian-aarch64:
    <<: *test
    extends: build-debian-aarch64
    dependencies:
        - build-debian-aarch64
    variables: *variables-debian-aarch64

test-win32:
    <<: *test
    extends: build-win32
    dependencies:
        - build-win32
    variables: *variables-win32

test-win64:
    <<: *test
    extends: build-win64
    dependencies:
        - build-win64
    variables: *variables-win64

test-macos:
    <<: *test
    extends: build-macos
    dependencies:
        - build-macos
    variables: *variables-macos

.release: &release
    stage: release
    script: |
        set -x
        _VERSION=$(./version.sh | grep _VERSION -| cut -d\  -f4-| sed 's, ,-,g' | sed 's,",,')
        mv x264${_PLATFORMSUFFIX} x264-${_VERSION}${_PLATFORMSUFFIX}
    when: manual
    only:
        - master@videolan/x264
        - stable@videolan/x264
    artifacts:
        name: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
        paths:
            - x264-*${_PLATFORMSUFFIX}
        expire_in: '10 minutes'

release-debian-amd64:
    <<: *release
    extends: build-debian-amd64
    dependencies:
        - build-debian-amd64
    variables: *variables-debian-amd64

release-debian-aarch64:
    <<: *release
    extends: build-debian-aarch64
    dependencies:
        - build-debian-aarch64
    variables: *variables-debian-aarch64

release-win32:
    <<: *release
    extends: build-win32
    dependencies:
        - build-win32
    variables: *variables-win32

release-win64:
    <<: *release
    extends: build-win64
    dependencies:
        - build-win64
    variables: *variables-win64

release-macos:
    <<: *release
    extends: build-macos
    dependencies:
        - build-macos
    variables: *variables-macos

# ================================ meson CI ==================================

.meson build:
  image: 'debian:sid'
  stage: build
  variables:
    DEPENDENCIES: >
      meson
      python3-setuptools
      build-essential
      ninja-build
      nasm
      git
    MESON_OPTION_ARGS:
    MESON_ARGS: >
      --warnlevel 2
      --prefix=${CI_PROJECT_DIR}/x264-prefix
      build/
  except:
    - schedules
  before_script:
    - apt-get update
    - apt-get install --assume-yes ${DEPENDENCIES}
    - mkdir -p "${CI_PROJECT_DIR}"
  script:
    - meson ${MESON_OPTION_ARGS} ${MESON_ARGS}
    - ninja -C build/
  artifacts:
    paths:
      - build/

.meson build asm:
  extends: '.meson build'
  variables:
    MESON_OPTION_ARGS: >
      -Dasm=enabled

.meson build no-asm:
  extends: '.meson build'
  variables:
    MESON_OPTION_ARGS: >
      -Dasm=disabled

meson asm:
  extends: '.meson build asm'

meson no-asm:
  extends: '.meson build no-asm'

meson asm x86:
  extends: '.meson build asm'
  image: 'i386/debian:sid'

meson no-asm x86:
  extends: '.meson build no-asm'
  image: 'i386/debian:sid'

# Test build with missing nasm but inline assembly
meson no-nasm:
  extends: '.meson build asm'
  stage: build
  variables:
    DEPENDENCIES: >
      meson
      python3-setuptools
      build-essential
      ninja-build
      git
    MESON_OPTION_ARGS: ''

.meson build windows:
  image: 'registry.freedesktop.org/gstreamer/gst-ci/amd64/windows:v10'
  stage: 'build'
  tags:
    - 'docker'
    - 'windows'
    - '1809'
  variables:
    # Uncomment the following key if need to pass custom args, as well with the
    # $env:MESON_ARGS line in the `script:` blocks
    # MESON_ARGS: >
    #   -Dfoo=enabled
    #   -Dbar=false
    # Make sure any failure in PowerShell scripts is fatal
    ErrorActionPreference: 'Stop'
    WarningPreference: 'Stop'
  before_script:
    - pip3 install -U meson
  script:
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    # - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")

    # Gitlab executes PowerShell in docker, but VsDevCmd.bat is a batch script.
    # Environment variables substitutions is done by PowerShell before calling
    # cmd.exe, that's why we use $env:FOO instead of %FOO%
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson build $env:MESON_ARGS &&
        ninja -C build"

meson vs2017 amd64:
  extends: '.meson build windows'
  variables:
    ARCH: 'amd64'

meson vs2017 x86:
  extends: '.meson build windows'
  variables:
    ARCH: 'x86'

meson msys2:
  extends: '.meson build windows'
  when: 'manual'
  allow_failure: true
  script:
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    # - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")

    - $env:PATH += ";C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\msys64\mingw32\bin"
    # XXX: Copied from https://gitlab.freedesktop.org/gstreamer/gst-ci/blob/master/gitlab/ci_template.yml#L487
    # For some reason docker build hangs if this is included in the image, needs more troubleshooting
    - C:\msys64\usr\bin\bash -c "pacman-key --init && pacman-key --populate msys2 && pacman-key --refresh-keys || true"
    - C:\msys64\usr\bin\bash -c "pacman -Syuu --noconfirm"
    - C:\msys64\usr\bin\bash -c "pacman -Sy --noconfirm --needed mingw-w64-x86_64-toolchain ninja"
    - C:\msys64\usr\bin\bash -c "meson build $env:MESON_ARGS &&
        ninja -C build"

meson macos:
  stage: 'build'
  tags:
    - gst-macos-10.15
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "build/meson-logs/*txt"
  before_script:
    - pip3 install --upgrade pip
    # Make sure meson is up to date
    - pip3 install -U meson
    # Need to install certificates for python
    - pip3 install --upgrade certifi
    # Anther way to install certificates
    - open /Applications/Python\ 3.8/Install\ Certificates.command
    # Get ninja
    - pip3 install -U ninja
  script:
    - CERT_PATH=$(python3 -m certifi) && export SSL_CERT_FILE=${CERT_PATH} && export REQUESTS_CA_BUNDLE=${CERT_PATH} && meson build
    - ninja -C build
    - meson test -C build